/* 
  1. 首先用字符串的形势来保存大数，就保证了其在数学表示上不会发生变化。
  2. 初始化res, temp变量来保存中间计算的结果，在将两个字符串split为数组，以便我们进行每一位的运算。
  3. 循环的第一次就是进行 "个位" 的运算，将二者最末尾的两个数相加，由于每一位数字是0 - 9，所以需要进行进位，在进过取余数操作后，将结果保留在个位。
  4. 判断 temp 是否大于 10，若是则将 temp 赋值为 true。
  5. 在两个大数中的一个还有数字没有参与运算，或者前一次运算发生进位后，进行下一次循环。
  6. 接着除了对新的两个数字相加还要加上 temp，若上次发生了进位，则此时 temp 为 true，Js因为存在隐式转换，所以 true 转换为 1，我们借用 Js 的类型转换，完成了逻辑上的逢10进1操作。Amazing
  7. 接下来就是重复上述的操作，直到计算结束。
*/

function sumBigNumber(a, b) {
  let res = '',
    tmp = 0
  a = a.split('')
  b = b.split('')
  while (a.length || b.length || tmp) {
    tmp += ~~a.pop() + ~~b.pop()
    res = (tmp % 10) + res
    tmp = tmp > 9
  }
  return res.replace(/^0+/, '')
}

sumBigNumber('100000000000002222', '111111')
sumBigNumber('3782647863278468012934670', '6666666000000000000000000')
